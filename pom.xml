<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.appdirect</groupId>
  <artifactId>service-integration-sdk</artifactId>
  <packaging>jar</packaging>
  <version>1.1-SNAPSHOT</version>
  <name>SDK for service integration</name>

  <properties>
    <java.version>1.8</java.version>
  </properties>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.4.1.RELEASE</version>
  </parent>

  <dependencies>
    <!-- Spring -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security.oauth</groupId>
      <artifactId>spring-security-oauth</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.16.10</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.21</version>
    </dependency>
    <dependency>
      <groupId>oauth.signpost</groupId>
      <artifactId>signpost-core</artifactId>
      <version>1.2.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpasyncclient</artifactId>
      <version>4.1.2</version>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.5.2</version>
    </dependency>
    <dependency>
      <groupId>oauth.signpost</groupId>
      <artifactId>signpost-commonshttp4</artifactId>
      <version>1.2.1.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.7.7.201606060606</version>
        <executions>
          <execution>
            <id>pre-unit-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${project.basedir}/target/jacoco-ut.exec</destFile>
              <append>true</append>
            </configuration>
          </execution>
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.basedir}/target/jacoco-ut.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>pre-integration-test</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${project.basedir}/target/jacoco-it.exec</destFile>
              <propertyName>failsafeArgLine</propertyName>
              <append>true</append>
            </configuration>
          </execution>
          <execution>
            <id>post-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.basedir}/target/jacoco-it.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>get-the-git-infos</id>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <!--
							If you'd like to tell the plugin where your .git directory is,
							use this setting, otherwise we'll perform a search trying to
							figure out the right directory. It's better to add it explicitly IMHO.
					-->
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>

          <!-- @since 2.2.0 -->
          <!-- 
							 If you want to set the timezone of the dateformat to anything in particular you can do this by using this option. 
							 As a general warning try to avoid three-letter time zone IDs because the same abbreviation are often used for multiple time zones. 
							 The default value we'll use the timezone use the timezone that's shipped with java (java.util.TimeZone.getDefault().getID()). 
							 *Note*: If you plan to set the java's timezone by using `MAVEN_OPTS=-Duser.timezone=UTC mvn clean package`, `mvn clean package -Duser.timezone=UTC` or any other configuration keep in mind that this option will override those settings and will not take other configurations into account!
					-->
          <dateFormatTimeZone>${user.timezone}</dateFormatTimeZone>
          <!-- 
							This is false by default, forces the plugin to generate the git.properties file.
							Note that the functional meaning of git.build.time becomes different in a very subtle way (see later in this README)
					-->
          <generateGitPropertiesFile>true</generateGitPropertiesFile>

          <!-- 
							The path for the to be generated properties file, it's relative to ${project.basedir} 
							The default value is ${project.build.outputDirectory}/git.properties

							*Note*: If you plan to set the generateGitPropertiesFilename-Path to a location where usally the source-files
											comes from (e.g. src/main/resources) and experience that your IDE (e.g. eclipse)
											invokes "Maven Project Builder" once every second, the chances that you are using
											an IDE where the src-folder is a watched folder for files that are *only* edited by humans is pretty high.
											For further information refer to the manual for your specifc IDE and check the worflow of "incremental project builders".
											In order to fix this problem we recommend to set the generateGitPropertiesFilename-Path
											to a target folder (e.g. ${project.build.outputDirectory}) since this is
											the place where all derived/generated resources should go.
					-->
          <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>

          <!-- Denotes the format to save properties in. Valid options are "properties" (default) and "json". Properties will be saved to the generateGitPropertiesFilename if generateGitPropertiesFile is set to `true`. -->
          <format>properties</format>

          <!-- @since 2.0.4 -->
          <!-- true by default, controls whether the plugin will fail when no .git directory is found, when set to false the plugin will just skip execution -->
          <failOnNoGitDirectory>true</failOnNoGitDirectory>

          <!-- @since 2.1.5 -->
          <!-- true by default, controls whether the plugin will fail if it was unable to obtain enough data for a complete run, if you don't care about this, you may want to set this value to false. -->
          <failOnUnableToExtractRepoInfo>true</failOnUnableToExtractRepoInfo>
          <!-- @since 2.1.9 -->
          <!--
							Can be used to exclude certain properties from being emitted into the resulting file.
							May be useful when you want to hide {@code git.remote.origin.url} (maybe because it contains your repo password?),
							or the email of the committer etc.

							Each value may be globbing, that is, you can write {@code git.commit.user.*} to exclude both, the {@code name},
							as well as {@code email} properties from being emitted into the resulting files.

							Please note that the strings here are Java regexes ({@code .*} is globbing, not plain {@code *}).
					-->
          <excludeProperties>
            <!-- <excludeProperty>git.user.*</excludeProperty> -->
          </excludeProperties>

          <!-- @since 2.1.14 -->
          <!--
							Can be used to include only certain properties into the resulting file.
							Will be overruled by the exclude properties.

							Each value may be globbing, that is, you can write {@code git.commit.user.*} to include both, the {@code name},
							as well as {@code email} properties into the resulting files.

							Please note that the strings here are Java regexes ({@code .*} is globbing, not plain {@code *}).
					-->
          <includeOnlyProperties>
            <!-- <includeOnlyProperty>^git.commit.id.full$</includeOnlyProperty> -->
          </includeOnlyProperties>
          <!-- @since 2.1.0 -->
          <!-- 
							read up about git-describe on the in man, or it's homepage - it's a really powerful versioning helper 
							and the recommended way to use git-commit-id-plugin. The configuration bellow is optional, 
							by default describe will run "just like git-describe on the command line", even though it's a JGit reimplementation.
					-->
          <gitDescribe>

            <!-- don't generate the describe property -->
            <skip>false</skip>

            <!-- 
								if no tag was found "near" this commit, just print the commit's id instead, 
								helpful when you always expect this field to be not-empty 
						-->
            <always>false</always>
            <!--
								 how many chars should be displayed as the commit object id? 
								 7 is git's default, 
								 0 has a special meaning (see end of this README.md), 
								 and 40 is the maximum value here 
						-->
            <abbrev>7</abbrev>

            <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
            <dirty>-dirty</dirty>

            <!-- Only consider tags matching the given pattern. This can be used to avoid leaking private tags from the repository. -->
            <match>*</match>

            <!--
								when you run git-describe it only looks only for *annotated tags* by default
								if you wish to consider *lightweight tags* in your describe as well you would need to switch this to *true*

								The difference between *annotated tags* and *lightweight tags* is outlined in more depth here:
								https://github.com/ktoso/maven-git-commit-id-plugin/#git-describe-and-a-small-gotcha-with-tags
						-->
            <tags>false</tags>

            <!-- 
								 always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. 
								 The distance will always be 0 if you're "on" the tag. 
						-->
            <forceLongFormat>false</forceLongFormat>
          </gitDescribe>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
